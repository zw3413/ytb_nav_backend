name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

# 添加权限配置
permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  PYTHON_VERSION: '3.11'
  SERVER_DIR: '/opt/ytb_nav'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 获取完整的 git 历史
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install uv
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        
    - name: Create virtual environment
      run: |
        uv venv
        source .venv/bin/activate
        
    - name: Install dependencies
      run: |
        source .venv/bin/activate
        # 安装所有依赖
        uv pip install numpy==1.24.3  # 使用较低版本的 numpy
        uv pip install -r requirements.txt
        uv pip install "autogen[openai]"  # 安装 autogen 及其 OpenAI 依赖
        # 安装 yt-dlp nightly 版本
        uv pip install --pre -U "yt-dlp[default]"
        # 更新 requirements.txt
        uv pip freeze > requirements.txt
        # 生成 requirements.lock
        uv pip compile requirements.txt -o requirements.lock
        # 安装测试依赖
        uv pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        source .venv/bin/activate
        pytest --cov=app tests/ || true  # 如果有测试失败也继续部署
        
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          # 安装必要的系统包
          echo "Installing system packages..."
          sudo yum update -y
          sudo yum install -y git curl
          
          # 安装 uv
          echo "Installing uv..."
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
          source ~/.bashrc
          
          # 创建项目目录
          echo "Creating project directory..."
          sudo mkdir -p ${{ env.SERVER_DIR }}
          sudo chown $USER:$USER ${{ env.SERVER_DIR }}
          
          # 配置 Git
          echo "Configuring Git..."
          git config --global credential.helper store
          echo "https://${{ secrets.GITHUB_TOKEN }}@github.com" > ~/.git-credentials
          
          # 克隆代码
          echo "Cloning repository..."
          cd ${{ env.SERVER_DIR }}
          if [ ! -d ".git" ]; then
            git clone https://github.com/${{ github.repository }}.git .
          fi
          
          # 创建备份
          echo "Creating backup..."
          if [ -d "${{ env.SERVER_DIR }}" ]; then
            backup_dir="/opt/ytb_nav_backup/$(date +%Y%m%d_%H%M%S)"
            sudo mkdir -p $backup_dir
            sudo cp -r ${{ env.SERVER_DIR }}/* $backup_dir/ 2>/dev/null || true
          fi
          
          # 更新代码
          echo "Updating code..."
          git fetch origin
          git reset --hard origin/main
          
          # 设置 Python 环境
          echo "Setting up Python environment..."
          if [ ! -d ".venv" ]; then
            uv venv
          fi
          source .venv/bin/activate
          
          # 更新依赖
          echo "Updating dependencies..."
          # 安装所有依赖
          uv pip install numpy==1.24.3  # 使用较低版本的 numpy
          uv pip install -r requirements.txt
          uv pip install "autogen[openai]"  # 安装 autogen 及其 OpenAI 依赖
          # 安装 yt-dlp nightly 版本
          uv pip install --pre -U "yt-dlp[default]"
          # 更新 requirements.txt
          uv pip freeze > requirements.txt
          # 生成 requirements.lock
          uv pip compile requirements.txt -o requirements.lock
          
          # 创建 systemd 服务
          echo "Creating systemd service..."
          sudo tee /etc/systemd/system/ytb_nav.service << EOF
          [Unit]
          Description=YTB Navigation Service
          After=network.target redis.service
          
          [Service]
          User=$USER
          WorkingDirectory=${{ env.SERVER_DIR }}
          Environment="PATH=${{ env.SERVER_DIR }}/.venv/bin"
          ExecStart=${{ env.SERVER_DIR }}/.venv/bin/uvicorn app.main:app --host 0.0.0.0 --port 8000
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # 重新加载 systemd 配置
          sudo systemctl daemon-reload
          
          # 启动服务
          echo "Starting service..."
          sudo systemctl enable ytb_nav
          sudo systemctl restart ytb_nav
          
          # 等待服务启动
          echo "Waiting for service to start..."
          sleep 10
          
          # 检查服务状态
          echo "Checking service status..."
          if systemctl is-active --quiet ytb_nav; then
            echo "Service is running successfully!"
          else
            echo "Service failed to start!"
            sudo journalctl -u ytb_nav -n 50
            exit 1
          fi
          
    - name: Notify on failure
      if: failure()
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: 'Deployment failed',
            body: 'Deployment failed for commit: ' + context.sha
          }) 